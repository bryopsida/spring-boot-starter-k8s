name: CI

on:
  push:
    branches:
      - main

jobs:
  helm-lint:
    name: "Helm Lint"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-java@v3
      with:
        distribution: "zulu"
        java-version: "17"
    - uses: actions/setup-node@v3
      with:
        node-version: 18
    - name: Execute Gradle Tasks
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: 8.3
        arguments: k8sResource k8sHelm
    - name: Run helm lint
      run: helm lint build/jkube/helm/spring-boot-template/kubernetes/
  java-unit-tests:
    name: "Test"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Execute Gradle Tasks
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.2
          arguments: spotlessCheck test jacocoReport bootJar
      - name: Upload Build
        uses: actions/upload-artifact@v3
        with:
          name: jar
          path: build/libs
          retention-days: 7
      - name: Upload Coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: build/jacoco
          retention-days: 7
      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v3
        with:
            name: coverage-reports
            path: build/reports
            retention-days: 7
  build-image:
    name: Build Image
    runs-on: ubuntu-latest
    needs:
      - helm-lint
      - java-unit-tests
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: jar
          path: build/libs/
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      - name: Setup Docker buildx
        id: buildx
        timeout-minutes: 4
        uses: docker/setup-buildx-action@a946f06b5ddbde456d0115dc585e8dc3c7a0c3e0
      - name: Log into registry
        timeout-minutes: 5
        uses: docker/login-action@553b6f090f15b58451081ce157ff1929a266131d
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get Default Branch Name
        id: default-branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "::set-output name=name::$(gh repo view --json defaultBranchRef --jq .defaultBranchRef.name)"
      - name: Extract Docker metadata
        id: meta
        timeout-minutes: 5
        uses: docker/metadata-action@c4ee3adeed93b1fa6a762f209fb01608c1a22f1e
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
                type=ref,event=branch
                type=ref,event=pr
                type=schedule
                type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', steps.default-branch.outputs.name) }}
                type=semver,pattern={{version}}
                type=semver,pattern={{major}}.{{minor}}
                type=sha
                type=raw,value={{date 'YYYYMMDD'}}-{{sha}}
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        if: ${{ inputs.download_artifact != '' }}
        with:
            name: ${{ inputs.download_artifact }}
            path: ${{ inputs.download_artifact_path }}
      - name: Display structure before build
        run: ls -R
      - name: Build Docker image
        id: build
        timeout-minutes: 25
        uses: docker/build-push-action@91df6b874e498451163feb47610c87c4a218c1ee
        with:
            context: .
            load: true
            push: false
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
            cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
      - name: Get Short SHA
        id: short-sha
        run: |
            export SHORT_SHA=$(git rev-parse --short HEAD)
            export SHORT_SHA_TAG_ONLY=sha-$SHORT_SHA
            echo "sha_short=$SHORT_SHA" >> $GITHUB_OUTPUT
            echo "build_tag=$SHORT_SHA_TAG_ONLY" >> $GITHUB_OUTPUT
            echo "sha_tag=${{ env.REGISTRY}}/${{ env.IMAGE_NAME }}:sha-$SHORT_SHA" >> $GITHUB_OUTPUT
            
      - name: Scan image
        id: scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.short-sha.outputs.sha_tag }}
          format: 'sarif'
          output: 'scan-results.sarif'
      - name: Push image
        id: push
        timeout-minutes: 60
        uses: docker/build-push-action@91df6b874e498451163feb47610c87c4a218c1ee
        with:
            context: .
            builder: ${{ steps.buildx.outputs.name }}
            load: false
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
            cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
            platforms: linux/amd64,linux/arm64